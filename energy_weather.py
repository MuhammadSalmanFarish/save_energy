# -*- coding: utf-8 -*-
"""Energy_weather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HRaJfMNYs3XzAgWZaD3ov2qPEBmRGdvX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Load dataset
file_path = "energy_weather_raw_data.csv"  # Change this to your actual file path
df = pd.read_csv(file_path)

# Convert 'date' column to datetime (if exists)
if 'date' in df.columns:
    df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Handle missing values:
# Fill numeric columns with median
df.fillna(df.select_dtypes(include=[np.number]).median(numeric_only=True), inplace=True)

# Fill categorical columns with mode (most frequent value)
for col in df.select_dtypes(include=['object']).columns:
    df.loc[:, col] = df[col].fillna(df[col].mode()[0])

# Normalize numerical columns (temperature, humidity, active power, etc.)
scaler = MinMaxScaler()
num_cols = ['temp', 'humidity', 'active_power']
df[num_cols] = scaler.fit_transform(df[num_cols])

# Define features (X) and target variable (y)
X = df[['temp', 'humidity']]  # Features (can add more)
y = df['active_power']  # Target: Energy consumption

# Split into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a RandomForest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print results
print(f"Mean Absolute Error: {mae:.3f}")
print(f"R² Score: {r2:.3f}")

# Example prediction (modify input values as needed)
sample_input = pd.DataFrame([[0.5, 0.6]], columns=['temp', 'humidity'])  # Normalized values
predicted_energy = model.predict(sample_input)
print(f"Predicted Energy Consumption: {predicted_energy[0]:.3f}")

# ----- Bar Chart Visualization -----
# Model performance metrics
metrics = ["Mean Absolute Error", "R² Score"]
values = [mae, r2]  # Using actual MAE and R² from the model

# Plot bar chart
plt.figure(figsize=(6, 4))
plt.bar(metrics, values, color=['blue', 'green'])
plt.ylabel("Score")
plt.title("Model Performance Metrics")
plt.ylim(0, 1)  # Normalize scale for better visualization

# Show values on top of bars
for i, v in enumerate(values):
    plt.text(i, v + 0.02, f"{v:.3f}", ha='center', fontsize=12)

plt.show()